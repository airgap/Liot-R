var $jscomp={scope:{}};$jscomp.defineProperty="function"==typeof Object.defineProperties?Object.defineProperty:function(a,e,c){if(c.get||c.set)throw new TypeError("ES3 does not support getters and setters.");a!=Array.prototype&&a!=Object.prototype&&(a[e]=c.value)};$jscomp.getGlobal=function(a){return"undefined"!=typeof window&&window===a?a:"undefined"!=typeof global&&null!=global?global:a};$jscomp.global=$jscomp.getGlobal(this);$jscomp.SYMBOL_PREFIX="jscomp_symbol_";
$jscomp.initSymbol=function(){$jscomp.initSymbol=function(){};$jscomp.global.Symbol||($jscomp.global.Symbol=$jscomp.Symbol)};$jscomp.symbolCounter_=0;$jscomp.Symbol=function(a){return $jscomp.SYMBOL_PREFIX+(a||"")+$jscomp.symbolCounter_++};
$jscomp.initSymbolIterator=function(){$jscomp.initSymbol();var a=$jscomp.global.Symbol.iterator;a||(a=$jscomp.global.Symbol.iterator=$jscomp.global.Symbol("iterator"));"function"!=typeof Array.prototype[a]&&$jscomp.defineProperty(Array.prototype,a,{configurable:!0,writable:!0,value:function(){return $jscomp.arrayIterator(this)}});$jscomp.initSymbolIterator=function(){}};$jscomp.arrayIterator=function(a){var e=0;return $jscomp.iteratorPrototype(function(){return e<a.length?{done:!1,value:a[e++]}:{done:!0}})};
$jscomp.iteratorPrototype=function(a){$jscomp.initSymbolIterator();a={next:a};a[$jscomp.global.Symbol.iterator]=function(){return this};return a};$jscomp.makeIterator=function(a){$jscomp.initSymbolIterator();var e=a[Symbol.iterator];return e?e.call(a):$jscomp.arrayIterator(a)};$jscomp.array=$jscomp.array||{};
$jscomp.iteratorFromArray=function(a,e){$jscomp.initSymbolIterator();a instanceof String&&(a+="");var c=0,f={next:function(){if(c<a.length){var g=c++;return{value:e(g,a[g]),done:!1}}f.next=function(){return{done:!0,value:void 0}};return f.next()}};f[Symbol.iterator]=function(){return f};return f};
$jscomp.polyfill=function(a,e,c,f){if(e){c=$jscomp.global;a=a.split(".");for(f=0;f<a.length-1;f++){var g=a[f];g in c||(c[g]={});c=c[g]}a=a[a.length-1];f=c[a];e=e(f);e!=f&&null!=e&&$jscomp.defineProperty(c,a,{configurable:!0,writable:!0,value:e})}};$jscomp.polyfill("Array.prototype.keys",function(a){return a?a:function(){return $jscomp.iteratorFromArray(this,function(a){return a})}},"es6-impl","es3");
exports=function(a,e,c){function f(a,c){DEBUG&&console.log(a||c);if(c&&"object"==typeof c.changes[0].new_val){var f=c.changes[0].new_val;r.table("Distributors").without("name").merge(function(a){return{collators:r.table("Collators").getAll(r.args(a("collators"))).pluck("id","filters").merge(function(a){return{filters:r.table("Filters").getAll(r.args(a("filters"))).pluck("id","json","code").coerceTo("array")}}).coerceTo("array")}}).coerceTo("array").run(CONNECTION,function(a,c){for(var l={},p=[],h=
$jscomp.makeIterator(c),d=h.next();!d.done;d=h.next())for(var d=d.value,d=$jscomp.makeIterator(d.collators),b=d.next();!b.done;b=d.next())for(var b=b.value,m=$jscomp.makeIterator(b.filters),b=m.next();!b.done;b=m.next())b=b.value,l.hasOwnProperty(b.id)||(l[b.id]=b.json);DEBUG&&console.log(l);for(var n=!1,d=Object.keys(l),d=$jscomp.makeIterator(d),h=d.next();!h.done;h=d.next())k=h.value,recur(l[k],f,"ROOT")&&(l[k]=!0);h=$jscomp.makeIterator(c);for(d=h.next();!d.done;d=h.next())for(d=d.value,m=$jscomp.makeIterator(d.collators),
b=m.next();!b.done;b=m.next()){for(var b=b.value,n=!1,q=$jscomp.makeIterator(b.filters),b=q.next();!b.done;b=q.next())if(b=b.value,l[b.id]){b=JSON.parse(JSON.stringify(g));d.accessor&&(b.accessor=d.accessor);d.push&&!d.queue&&(b.id=r.uuid(b.id+" "+d.id));b.distributor=d.id;p.push(b);d.callback&&validUrl.isUri(d.url)?sendDataToCallback(b,d.url):d.push&&r.table("DistributedData").insert(p).run(CONNECTION,function(a,b){DEBUG&&console.log(a||b)});n=!0;break}if(n)break}DEBUG&&console.log("PASS");e.send({})})}}
var g={};"string"!=typeof c.accessor?e.send({err:"No accessor specified."}):(a=typeof c.value,"undefined"==a||"null"==a?e.send({err:"No value specified."}):"string"==typeof c.id?g.id=c.id:(g.accessor=c.accessor,g.value=c.value,g.id?r.branch(r.table("Collectors").getAll(g.accessor,{index:"accessor"}).filter({aggregate:!0}).limit(1).count().eq(1),r.table("Collectors").get(g.id).update({value:g.value},{return_changes:"always"}),{replaced:0}).run(CONNECTION,f):r.table("Collectors").getAll(g.accessor,
{index:"accessor"}).update({value:g.value},{return_changes:"always"}).run(CONNECTION,f)))};
