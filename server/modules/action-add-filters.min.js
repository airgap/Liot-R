var $jscomp={scope:{}};$jscomp.defineProperty="function"==typeof Object.defineProperties?Object.defineProperty:function(a,c,b){if(b.get||b.set)throw new TypeError("ES3 does not support getters and setters.");a!=Array.prototype&&a!=Object.prototype&&(a[c]=b.value)};$jscomp.getGlobal=function(a){return"undefined"!=typeof window&&window===a?a:"undefined"!=typeof global&&null!=global?global:a};$jscomp.global=$jscomp.getGlobal(this);$jscomp.SYMBOL_PREFIX="jscomp_symbol_";
$jscomp.initSymbol=function(){$jscomp.initSymbol=function(){};$jscomp.global.Symbol||($jscomp.global.Symbol=$jscomp.Symbol)};$jscomp.symbolCounter_=0;$jscomp.Symbol=function(a){return $jscomp.SYMBOL_PREFIX+(a||"")+$jscomp.symbolCounter_++};
$jscomp.initSymbolIterator=function(){$jscomp.initSymbol();var a=$jscomp.global.Symbol.iterator;a||(a=$jscomp.global.Symbol.iterator=$jscomp.global.Symbol("iterator"));"function"!=typeof Array.prototype[a]&&$jscomp.defineProperty(Array.prototype,a,{configurable:!0,writable:!0,value:function(){return $jscomp.arrayIterator(this)}});$jscomp.initSymbolIterator=function(){}};$jscomp.arrayIterator=function(a){var c=0;return $jscomp.iteratorPrototype(function(){return c<a.length?{done:!1,value:a[c++]}:{done:!0}})};
$jscomp.iteratorPrototype=function(a){$jscomp.initSymbolIterator();a={next:a};a[$jscomp.global.Symbol.iterator]=function(){return this};return a};$jscomp.makeIterator=function(a){$jscomp.initSymbolIterator();var c=a[Symbol.iterator];return c?c.call(a):$jscomp.arrayIterator(a)};
$jscomp.checkStringArgs=function(a,c,b){if(null==a)throw new TypeError("The 'this' value for String.prototype."+b+" must not be null or undefined");if(c instanceof RegExp)throw new TypeError("First argument to String.prototype."+b+" must not be a regular expression");return a+""};
$jscomp.polyfill=function(a,c,b,d){if(c){b=$jscomp.global;a=a.split(".");for(d=0;d<a.length-1;d++){var f=a[d];f in b||(b[f]={});b=b[f]}a=a[a.length-1];d=b[a];c=c(d);c!=d&&null!=c&&$jscomp.defineProperty(b,a,{configurable:!0,writable:!0,value:c})}};$jscomp.polyfill("String.prototype.includes",function(a){return a?a:function(a,b){return-1!==$jscomp.checkStringArgs(this,a,"includes").indexOf(a,b||0)}},"es6-impl","es3");$jscomp.array=$jscomp.array||{};
$jscomp.iteratorFromArray=function(a,c){$jscomp.initSymbolIterator();a instanceof String&&(a+="");var b=0,d={next:function(){if(b<a.length){var f=b++;return{value:c(f,a[f]),done:!1}}d.next=function(){return{done:!0,value:void 0}};return d.next()}};d[Symbol.iterator]=function(){return d};return d};$jscomp.polyfill("Array.prototype.keys",function(a){return a?a:function(){return $jscomp.iteratorFromArray(this,function(a){return a})}},"es6-impl","es3");
var r=require("rethinkdb"),COMPARATORS="EQUALS NEQUALS TFEQUALS TFNEQUALS OVER OVEROR UNDER UNDEROR".split(" "),OPERATORS="AND OR NAND NOR XOR SAME".split(" ");
module.exports=function(a,c,b,d,f){function h(b){d.send({err:b});a&&console.log(b)}if(Array.isArray(f.filters)){b=[];f=$jscomp.makeIterator(f.filters);for(var g=f.next();!g.done;g=f.next()){var g=g.value,k={};"string"===typeof g.name&&(k.name=g.name);"string"===typeof g.id&&(k.id=g.id);if("string"===typeof g.code){var m=function(b,c){var d="undefined"==typeof c;if(d||"number"!==typeof b[c]&&"string"!==typeof b[c])if(Array.isArray(b))Array.isArray(b)&&(a&&console.log("array: "+c),COMPARATORS.includes(c)?
2!=b.length&&h("All comparators expect 2 parameters. Found "+b.length):h("Invalid comparator."));else if(d||!c||OPERATORS.includes(c)){var e=Object.keys(b);a&&console.log(d&&1!=e.length);if(d&&1!=e.length)h("Root object must contain exactly one object, not "+e.length);else if(d||2===e.length)for(d=$jscomp.makeIterator(e),e=d.next();!e.done;e=d.next())if(e=e.value,COMPARATORS.includes(e))m(b[e],e);else if(OPERATORS.includes(e))m(b[e],e);else{h("Invalid comparator or operator.");break}else h("Operator "+
c+" expects 2 parameters, not "+e.length)}else h("Not a valid operator.");else COMPARATORS.includes(c)||h("All numbers and strings must reside in comparators.")},n=g.code,l;try{l=JSON.parse(n)}catch(p){h("Invalid JSON.");return}a&&console.log(l);m(l);k.code=g.code;k.json=l}b.push(k)}r.table("Filters").insert(b,{conflict:"replace"}).run(c,function(b,c){b?(d.send({err:"Error creating filters."}),a&&console.log(b)):(d.send({}),a&&console.log("Created filters."))})}};
