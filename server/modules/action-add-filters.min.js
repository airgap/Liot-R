var $jscomp={scope:{}};$jscomp.defineProperty="function"==typeof Object.defineProperties?Object.defineProperty:function(a,d,c){if(c.get||c.set)throw new TypeError("ES3 does not support getters and setters.");a!=Array.prototype&&a!=Object.prototype&&(a[d]=c.value)};$jscomp.getGlobal=function(a){return"undefined"!=typeof window&&window===a?a:"undefined"!=typeof global&&null!=global?global:a};$jscomp.global=$jscomp.getGlobal(this);$jscomp.SYMBOL_PREFIX="jscomp_symbol_";
$jscomp.initSymbol=function(){$jscomp.initSymbol=function(){};$jscomp.global.Symbol||($jscomp.global.Symbol=$jscomp.Symbol)};$jscomp.symbolCounter_=0;$jscomp.Symbol=function(a){return $jscomp.SYMBOL_PREFIX+(a||"")+$jscomp.symbolCounter_++};
$jscomp.initSymbolIterator=function(){$jscomp.initSymbol();var a=$jscomp.global.Symbol.iterator;a||(a=$jscomp.global.Symbol.iterator=$jscomp.global.Symbol("iterator"));"function"!=typeof Array.prototype[a]&&$jscomp.defineProperty(Array.prototype,a,{configurable:!0,writable:!0,value:function(){return $jscomp.arrayIterator(this)}});$jscomp.initSymbolIterator=function(){}};$jscomp.arrayIterator=function(a){var d=0;return $jscomp.iteratorPrototype(function(){return d<a.length?{done:!1,value:a[d++]}:{done:!0}})};
$jscomp.iteratorPrototype=function(a){$jscomp.initSymbolIterator();a={next:a};a[$jscomp.global.Symbol.iterator]=function(){return this};return a};$jscomp.makeIterator=function(a){$jscomp.initSymbolIterator();var d=a[Symbol.iterator];return d?d.call(a):$jscomp.arrayIterator(a)};
$jscomp.checkStringArgs=function(a,d,c){if(null==a)throw new TypeError("The 'this' value for String.prototype."+c+" must not be null or undefined");if(d instanceof RegExp)throw new TypeError("First argument to String.prototype."+c+" must not be a regular expression");return a+""};
$jscomp.polyfill=function(a,d,c,e){if(d){c=$jscomp.global;a=a.split(".");for(e=0;e<a.length-1;e++){var b=a[e];b in c||(c[b]={});c=c[b]}a=a[a.length-1];e=c[a];d=d(e);d!=e&&null!=d&&$jscomp.defineProperty(c,a,{configurable:!0,writable:!0,value:d})}};$jscomp.polyfill("String.prototype.includes",function(a){return a?a:function(a,c){return-1!==$jscomp.checkStringArgs(this,a,"includes").indexOf(a,c||0)}},"es6-impl","es3");$jscomp.array=$jscomp.array||{};
$jscomp.iteratorFromArray=function(a,d){$jscomp.initSymbolIterator();a instanceof String&&(a+="");var c=0,e={next:function(){if(c<a.length){var b=c++;return{value:d(b,a[b]),done:!1}}e.next=function(){return{done:!0,value:void 0}};return e.next()}};e[Symbol.iterator]=function(){return e};return e};$jscomp.polyfill("Array.prototype.keys",function(a){return a?a:function(){return $jscomp.iteratorFromArray(this,function(a){return a})}},"es6-impl","es3");
exports=function(a,d,c){function e(a){d.send({err:a});DEBUG&&console.log(a)}if(Array.isArray(c.filters)){a=[];c=$jscomp.makeIterator(c.filters);for(var b=c.next();!b.done;b=c.next()){var b=b.value,f={};"string"===typeof b.name&&(f.name=b.name);"string"===typeof b.id&&(f.id=b.id);if("string"===typeof b.code){var h=function(a,c){var d="undefined"==typeof c;if(d||"number"!==typeof a[c]&&"string"!==typeof a[c])if(Array.isArray(a))Array.isArray(a)&&(DEBUG&&console.log("array: "+c),COMPARATORS.includes(c)?
2!=a.length&&e("All comparators expect 2 parameters. Found "+a.length):e("Invalid comparator."));else if(d||!c||OPERATORS.includes(c)){var b=Object.keys(a);DEBUG&&console.log(d&&1!=b.length);if(d&&1!=b.length)e("Root object must contain exactly one object, not "+b.length);else if(d||2===b.length)for(d=$jscomp.makeIterator(b),b=d.next();!b.done;b=d.next())if(b=b.value,COMPARATORS.includes(b))h(a[b],b);else if(OPERATORS.includes(b))h(a[b],b);else{e("Invalid comparator or operator.");break}else e("Operator "+
c+" expects 2 parameters, not "+b.length)}else e("Not a valid operator.");else COMPARATORS.includes(c)||e("All numbers and strings must reside in comparators.")},k=b.code,g;try{g=JSON.parse(k)}catch(l){e("Invalid JSON.");return}DEBUG&&console.log(g);h(g);f.code=b.code;f.json=g}a.push(f)}r.table("Filters").insert(a,{conflict:"replace"}).run(CONNECTION,function(a,b){a?(d.send({err:"Error creating filters."}),DEBUG&&console.log(a)):(d.send({}),DEBUG&&console.log("Created filters."))})}};
