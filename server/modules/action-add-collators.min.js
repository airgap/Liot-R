var $jscomp={scope:{}};$jscomp.defineProperty="function"==typeof Object.defineProperties?Object.defineProperty:function(a,c,b){if(b.get||b.set)throw new TypeError("ES3 does not support getters and setters.");a!=Array.prototype&&a!=Object.prototype&&(a[c]=b.value)};$jscomp.getGlobal=function(a){return"undefined"!=typeof window&&window===a?a:"undefined"!=typeof global&&null!=global?global:a};$jscomp.global=$jscomp.getGlobal(this);$jscomp.SYMBOL_PREFIX="jscomp_symbol_";
$jscomp.initSymbol=function(){$jscomp.initSymbol=function(){};$jscomp.global.Symbol||($jscomp.global.Symbol=$jscomp.Symbol)};$jscomp.symbolCounter_=0;$jscomp.Symbol=function(a){return $jscomp.SYMBOL_PREFIX+(a||"")+$jscomp.symbolCounter_++};
$jscomp.initSymbolIterator=function(){$jscomp.initSymbol();var a=$jscomp.global.Symbol.iterator;a||(a=$jscomp.global.Symbol.iterator=$jscomp.global.Symbol("iterator"));"function"!=typeof Array.prototype[a]&&$jscomp.defineProperty(Array.prototype,a,{configurable:!0,writable:!0,value:function(){return $jscomp.arrayIterator(this)}});$jscomp.initSymbolIterator=function(){}};$jscomp.arrayIterator=function(a){var c=0;return $jscomp.iteratorPrototype(function(){return c<a.length?{done:!1,value:a[c++]}:{done:!0}})};
$jscomp.iteratorPrototype=function(a){$jscomp.initSymbolIterator();a={next:a};a[$jscomp.global.Symbol.iterator]=function(){return this};return a};$jscomp.makeIterator=function(a){$jscomp.initSymbolIterator();var c=a[Symbol.iterator];return c?c.call(a):$jscomp.arrayIterator(a)};
exports=function(a,c,b){if(Array.isArray(b.collators)){var g=[];a=$jscomp.makeIterator(b.collators);for(b=a.next();!b.done;b=a.next()){var d=b.value;b={};"string"===typeof d.id&&(b.id=d.id);"string"===typeof d.name&&d.name.length&&(b.name=d.name);if(Array.isArray(d.filters))for(var f=[],d=$jscomp.makeIterator(d.filters),e=d.next();!e.done;e=d.next())e=e.value,"string"===typeof e&&-1==f.indexOf(e)&&f.push(e);b.filters=f;g.push(b)}}r.table("Collators").insert(g,{conflict:"replace"}).run(CONNECTION,
function(a,b){a?(c.send({err:"Unable to create collators."}),DEBUG&&console.log(a)):(c.send({}),DEBUG&&console.log("Created collators."))})};
