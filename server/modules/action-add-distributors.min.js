var $jscomp={scope:{}};$jscomp.defineProperty="function"==typeof Object.defineProperties?Object.defineProperty:function(a,c,d){if(d.get||d.set)throw new TypeError("ES3 does not support getters and setters.");a!=Array.prototype&&a!=Object.prototype&&(a[c]=d.value)};$jscomp.getGlobal=function(a){return"undefined"!=typeof window&&window===a?a:"undefined"!=typeof global&&null!=global?global:a};$jscomp.global=$jscomp.getGlobal(this);$jscomp.SYMBOL_PREFIX="jscomp_symbol_";
$jscomp.initSymbol=function(){$jscomp.initSymbol=function(){};$jscomp.global.Symbol||($jscomp.global.Symbol=$jscomp.Symbol)};$jscomp.symbolCounter_=0;$jscomp.Symbol=function(a){return $jscomp.SYMBOL_PREFIX+(a||"")+$jscomp.symbolCounter_++};
$jscomp.initSymbolIterator=function(){$jscomp.initSymbol();var a=$jscomp.global.Symbol.iterator;a||(a=$jscomp.global.Symbol.iterator=$jscomp.global.Symbol("iterator"));"function"!=typeof Array.prototype[a]&&$jscomp.defineProperty(Array.prototype,a,{configurable:!0,writable:!0,value:function(){return $jscomp.arrayIterator(this)}});$jscomp.initSymbolIterator=function(){}};$jscomp.arrayIterator=function(a){var c=0;return $jscomp.iteratorPrototype(function(){return c<a.length?{done:!1,value:a[c++]}:{done:!0}})};
$jscomp.iteratorPrototype=function(a){$jscomp.initSymbolIterator();a={next:a};a[$jscomp.global.Symbol.iterator]=function(){return this};return a};$jscomp.makeIterator=function(a){$jscomp.initSymbolIterator();var c=a[Symbol.iterator];return c?c.call(a):$jscomp.arrayIterator(a)};
exports=function(a,c,d){if(Array.isArray(d.distributors)){a=[];d=$jscomp.makeIterator(d.distributors);for(var b=d.next();!b.done;b=d.next()){var b=b.value,e={collators:[]};"string"===typeof b.id&&(e.id=b.id);if(Array.isArray(b.collators))for(var g=$jscomp.makeIterator(b.collators),f=g.next();!f.done;f=g.next())e.collators.push(f.value);"string"===typeof b.url&&validUrl.isUri(b.url)&&(e.url=b.url);"string"===typeof b.name&&0<b.name.length&&(e.name=b.name);e.push=!!b.push;e.queue=!!b.queue;e.callback=
!!b.callback;a.push(e)}r.table("Distributors").insert(a,{conflict:"replace"}).run(CONNECTION,function(a,b){a?(c.send({err:"Error creating distributors."}),DEBUG&&console.log(a)):(c.send({}),DEBUG&&console.log("Created distributors."))})}};
