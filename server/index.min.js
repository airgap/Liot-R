var $jscomp={scope:{}};$jscomp.defineProperty="function"==typeof Object.defineProperties?Object.defineProperty:function(c,d,b){if(b.get||b.set)throw new TypeError("ES3 does not support getters and setters.");c!=Array.prototype&&c!=Object.prototype&&(c[d]=b.value)};$jscomp.getGlobal=function(c){return"undefined"!=typeof window&&window===c?c:"undefined"!=typeof global&&null!=global?global:c};$jscomp.global=$jscomp.getGlobal(this);$jscomp.SYMBOL_PREFIX="jscomp_symbol_";
$jscomp.initSymbol=function(){$jscomp.initSymbol=function(){};$jscomp.global.Symbol||($jscomp.global.Symbol=$jscomp.Symbol)};$jscomp.symbolCounter_=0;$jscomp.Symbol=function(c){return $jscomp.SYMBOL_PREFIX+(c||"")+$jscomp.symbolCounter_++};
$jscomp.initSymbolIterator=function(){$jscomp.initSymbol();var c=$jscomp.global.Symbol.iterator;c||(c=$jscomp.global.Symbol.iterator=$jscomp.global.Symbol("iterator"));"function"!=typeof Array.prototype[c]&&$jscomp.defineProperty(Array.prototype,c,{configurable:!0,writable:!0,value:function(){return $jscomp.arrayIterator(this)}});$jscomp.initSymbolIterator=function(){}};$jscomp.arrayIterator=function(c){var d=0;return $jscomp.iteratorPrototype(function(){return d<c.length?{done:!1,value:c[d++]}:{done:!0}})};
$jscomp.iteratorPrototype=function(c){$jscomp.initSymbolIterator();c={next:c};c[$jscomp.global.Symbol.iterator]=function(){return this};return c};$jscomp.makeIterator=function(c){$jscomp.initSymbolIterator();var d=c[Symbol.iterator];return d?d.call(c):$jscomp.arrayIterator(c)};
$jscomp.checkStringArgs=function(c,d,b){if(null==c)throw new TypeError("The 'this' value for String.prototype."+b+" must not be null or undefined");if(d instanceof RegExp)throw new TypeError("First argument to String.prototype."+b+" must not be a regular expression");return c+""};
$jscomp.polyfill=function(c,d,b,a){if(d){b=$jscomp.global;c=c.split(".");for(a=0;a<c.length-1;a++){var e=c[a];e in b||(b[e]={});b=b[e]}c=c[c.length-1];a=b[c];d=d(a);d!=a&&null!=d&&$jscomp.defineProperty(b,c,{configurable:!0,writable:!0,value:d})}};$jscomp.polyfill("String.prototype.includes",function(c){return c?c:function(c,b){return-1!==$jscomp.checkStringArgs(this,c,"includes").indexOf(c,b||0)}},"es6-impl","es3");$jscomp.array=$jscomp.array||{};
$jscomp.iteratorFromArray=function(c,d){$jscomp.initSymbolIterator();c instanceof String&&(c+="");var b=0,a={next:function(){if(b<c.length){var e=b++;return{value:d(e,c[e]),done:!1}}a.next=function(){return{done:!0,value:void 0}};return a.next()}};a[Symbol.iterator]=function(){return a};return a};$jscomp.polyfill("Array.prototype.keys",function(c){return c?c:function(){return $jscomp.iteratorFromArray(this,function(c){return c})}},"es6-impl","es3");
var DEBUG=1,COMPARATORS="EQUALS NEQUALS TFEQUALS TFNEQUALS OVER OVEROR UNDER UNDEROR".split(" "),OPERATORS="AND OR NAND NOR XOR SAME".split(" "),r=require("rethinkdb"),express=require("express"),bodyParser=require("body-parser"),validUrl=require("valid-url"),request=require("request"),app=express(),fs=require("fs"),CONFIG={port:7474};app.use(bodyParser.json());
app.use(function(c,d,b){d.header("Access-Control-Allow-Origin","*");d.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept");b()});
var kRETURN_CHANGES={return_changes:!0},ADMINACTIONS={"list collectors":actionListCollectors,"add collectors":actionAddCollectors,"get collectors":actionGetCollectors,"delete collectors":actionDeleteCollectors,"list filters":actionListFilters,"add filters":actionAddFilters,"get filters":actionGetFilters,"delete filters":actionDeleteFilters,"count filter references":actionCountFilterReferences,"list filter referrers":actionListFilterReferrers,"list collators":actionListCollators,"add collators":actionAddCollators,
"get collators":actionGetCollators,"delete collators":actionDeleteCollators,"count collator references":actionCountCollatorReferences,"list distributors":actionListDistributors,"add distributors":actionAddDistributors,"get distributors":actionGetDistributors,"delete distributors":actionDeleteDistributors,"alter distributors":actionModDistributors,"push update":actionPushUpdate},PUBLICACTIONS={};readConfig();
function readConfig(){fs.readFile("liot-server-conf.json",function(c,d){if(d){var b=JSON.parse(d.toString());b.port&&(CONFIG.port=b.port);DEBUG&&console.log(b)}startRethinkServer();launchHttpServer()})}
function startRethinkServer(){r.connect({host:"localhost"},function(c,d){c||!d?DEBUG&&console.log("Cannot connect to RethinkDB"):r.dbList().contains("LiotR")["do"](function(b){return r.branch(b,{dbs_created:0},r.dbCreate("LiotR"))}).run(d,function(b,a){if(b||!d)return DEBUG&&console.log("Could not ensure existence of database for Liot R."),!1;CONNECTION=d;d.use("LiotR");a.dbs_created&&(DEBUG?console.log("Created database for Liot R."):DEBUG&&console.log("Found database for Liot R."));DEBUG&&console.log("Connected to database for Liot R.");
return!0})})}function launchHttpServer(){app.post("/",rcvdPost);app.listen(CONFIG.port)}function rcvdPost(c,d){var b=c.connection.remoteAddress.match(/^(127.0.0.1|::ffff:127.0.0.1|::1)$/)&&!0;DEBUG&&console.log(b);DEBUG&&console.log(c.body);var a=c.body.action;d.header("Access-Control-Allow-Origin","*");if(a){var e=c.body;if(b&&a in ADMINACTIONS)ADMINACTIONS[a](c,d,e);else if(a in PUBLICACTIONS)PUBLICACTIONS[a](c,d,e)}}
function actionListCollators(c,d,b){var a=0,e=100;c=["smart","name","id"];var f="smart",h=["ascending","descending"],m="ascending";"number"==typeof b.after&&(a=b.after);"number"==typeof b.count&&0<=b.count&&1001>b.count&&(e=b.count);"string"===typeof b.order&&b.order in c&&(f=c[b.order]);"string"===typeof b.direction&&b.direction in h&&(m=b.direction);"descending"==m&&(f=r.desc(f));r.table("Collators").count().run(CONNECTION,function(b,c){b||(0>a&&(a+=c),a=Math.max(0,a),r.table("Collators").orderBy(f).slice(a,
a+e).merge(function(a){return{filtrets:r.table("Filters").getAll(r.args(a("filters"))).coerceTo("array")}}).coerceTo("array").run(CONNECTION,function(a,b){a?(d.send({err:"Unable to query."}),DEBUG&&console.log(a)):(d.send({collators:b}),DEBUG&&console.log("Queried collators."),DEBUG&&console.log(b))}))})}
function actionListCollectors(c,d,b){var a=0,e=100;c=["smart","name","id"];var f="smart",h=["ascending","descending"],m="ascending";"number"==typeof b.after&&(a=b.after);"number"==typeof b.count&&0<=b.count&&1001>b.count&&(e=b.count);"string"===typeof b.order&&b.order in c&&(f=c[b.order]);"string"===typeof b.direction&&b.direction in h&&(m=b.direction);"descending"==m&&(f=r.desc(f));r.table("Collectors").count().run(CONNECTION,function(b,c){b||(0>a&&(a+=c),a=Math.max(0,a),r.table("Collectors").orderBy(f).slice(a,
a+e).coerceTo("array").run(CONNECTION,function(a,b){a?(d.send({err:"Unable to query."}),DEBUG&&console.log(a)):(d.send({collectors:b}),DEBUG&&console.log("Queried collectors."),DEBUG&&console.log(b))}))})}
function actionListFilters(c,d,b){var a=0,e=100;c=["smart","name","id"];var f="smart",h=["ascending","descending"],m="ascending";"number"==typeof b.after&&(a=b.after);"number"==typeof b.count&&0<=b.count&&1001>b.count&&(e=b.count);"string"===typeof b.order&&b.order in c&&(f=c[b.order]);"string"===typeof b.direction&&b.direction in h&&(m=b.direction);"descending"==m&&(f=r.desc(f));r.table("Filters").count().run(CONNECTION,function(b,c){b||(0>a&&(a+=c),a=Math.max(0,a),r.table("Filters").orderBy(f).slice(a,
a+e).coerceTo("array").run(CONNECTION,function(a,b){a?(d.send({err:"Unable to query."}),DEBUG&&console.log(a)):(d.send({filters:b}),DEBUG&&console.log("Queried filters."),DEBUG&&console.log(b))}))})}
function actionListDistributors(c,d,b){var a=0,e=100;c=["smart","name","id"];var f="smart",h=["ascending","descending"],m="ascending";"number"==typeof b.after&&(a=b.after);"number"==typeof b.count&&0<=b.count&&1001>b.count&&(e=b.count);"string"===typeof b.order&&b.order in c&&(f=c[b.order]);"string"===typeof b.direction&&b.direction in h&&(m=b.direction);"descending"==m&&(f=r.desc(f));r.table("Distributors").count().run(CONNECTION,function(b,c){b||(0>a&&(a+=c),a=Math.max(0,a),r.table("Distributors").orderBy(f).slice(a,
a+e).merge(function(a){return{collets:r.table("Collators").getAll(r.args(a("collators"))).merge(function(a){return{filtrets:r.table("Filters").getAll(r.args(a("filters"))).coerceTo("array")}}).coerceTo("array")}}).coerceTo("array").run(CONNECTION,function(a,b){a?(d.send({err:"Unable to query."}),DEBUG&&console.log(a)):(d.send({distributors:b}),DEBUG&&console.log("Queried distributors."),DEBUG&&console.log(b))}))})}
function actionAddCollectors(c,d,b){c=[];var a=["manufacture_date","manufacturer","model","series"];if(Array.isArray(b.collectors)){b=$jscomp.makeIterator(b.collectors);for(var e=b.next();!e.done;e=b.next())if(e=e.value,"object"===typeof e){var f={};if("object"===typeof e.device_info){var h=e.device_info;f.device_info={};for(var m=$jscomp.makeIterator(a),n=m.next();!n.done;n=m.next())n=n.value,"string"===typeof h[n]&&100>h[n].length&&(f.device_info[n]=h[n])}"string"===typeof e.name&&100>e.name.length&&
(f.name=e.name);f.value=0;f.smart=sortify(e.name||"");f.aggregate=!!e.aggregate;f.accessor=r.uuid();c.push(f)}r.table("Collectors").insert(c,{conflict:"replace"}).run(CONNECTION,function(a,b){d.send(a?{err:"Could not create collectors."}:{})})}}function sortify(c){var d=0;if(c=c.match(/([A-Za-z]+|[0-9]+|.+?)/g))for(var b=0;b<c.length;b++){var a=c[b];if(a.match(/^[A-Za-z]+$/))for(var e in a)d+=a.charCodeAt(e);else if(a.match(/^[0-9]+$/))d+=1*a;else for(e in a)d+=a.charCodeAt(e)}return d}
function actionAddCollators(c,d,b){if(Array.isArray(b.collators)){var a=[];c=$jscomp.makeIterator(b.collators);for(b=c.next();!b.done;b=c.next()){var e=b.value;b={};"string"===typeof e.id&&(b.id=e.id);"string"===typeof e.name&&e.name.length&&(b.name=e.name);if(Array.isArray(e.filters))for(var f=[],e=$jscomp.makeIterator(e.filters),h=e.next();!h.done;h=e.next())h=h.value,"string"===typeof h&&-1==f.indexOf(h)&&f.push(h);b.filters=f;a.push(b)}}r.table("Collators").insert(a,{conflict:"replace"}).run(CONNECTION,
function(a,b){a?(d.send({err:"Unable to create collators."}),DEBUG&&console.log(a)):(d.send({}),DEBUG&&console.log("Created collators."))})}
function actionAddDistributors(c,d,b){if(Array.isArray(b.distributors)){c=[];b=$jscomp.makeIterator(b.distributors);for(var a=b.next();!a.done;a=b.next()){var a=a.value,e={collators:[]};"string"===typeof a.id&&(e.id=a.id);if(Array.isArray(a.collators))for(var f=$jscomp.makeIterator(a.collators),h=f.next();!h.done;h=f.next())e.collators.push(h.value);"string"===typeof a.url&&validUrl.isUri(a.url)&&(e.url=a.url);"string"===typeof a.name&&0<a.name.length&&(e.name=a.name);e.push=!!a.push;e.queue=!!a.queue;
e.callback=!!a.callback;c.push(e)}r.table("Distributors").insert(c,{conflict:"replace"}).run(CONNECTION,function(a,b){a?(d.send({err:"Error creating distributors."}),DEBUG&&console.log(a)):(d.send({}),DEBUG&&console.log("Created distributors."))})}}
function actionAddFilters(c,d,b){function a(a){d.send({err:a});DEBUG&&console.log(a)}if(Array.isArray(b.filters)){c=[];b=$jscomp.makeIterator(b.filters);for(var e=b.next();!e.done;e=b.next()){var e=e.value,f={};"string"===typeof e.name&&(f.name=e.name);"string"===typeof e.id&&(f.id=e.id);if("string"===typeof e.code){var h=function(b,c){var e="undefined"==typeof c;if(e||"number"!==typeof b[c]&&"string"!==typeof b[c])if(Array.isArray(b))Array.isArray(b)&&(DEBUG&&console.log("array: "+c),COMPARATORS.includes(c)?
2!=b.length&&a("All comparators expect 2 parameters. Found "+b.length):a("Invalid comparator."));else if(e||!c||OPERATORS.includes(c)){var d=Object.keys(b);DEBUG&&console.log(e&&1!=d.length);if(e&&1!=d.length)a("Root object must contain exactly one object, not "+d.length);else if(e||2===d.length)for(e=$jscomp.makeIterator(d),d=e.next();!d.done;d=e.next())if(d=d.value,COMPARATORS.includes(d))h(b[d],d);else if(OPERATORS.includes(d))h(b[d],d);else{a("Invalid comparator or operator.");break}else a("Operator "+
c+" expects 2 parameters, not "+d.length)}else a("Not a valid operator.");else COMPARATORS.includes(c)||a("All numbers and strings must reside in comparators.")},m=e.code,n;try{n=JSON.parse(m)}catch(t){a("Invalid JSON.");return}DEBUG&&console.log(n);h(n);f.code=e.code;f.json=n}c.push(f)}r.table("Filters").insert(c,{conflict:"replace"}).run(CONNECTION,function(a,b){a?(d.send({err:"Error creating filters."}),DEBUG&&console.log(a)):(d.send({}),DEBUG&&console.log("Created filters."))})}}
function actionModDistributors(c,d,b){if(Array.isArray(b.distributors)){c=[];b=$jscomp.makeIterator(b.distributors);for(var a=b.next();!a.done;a=b.next()){var e=a.value,a={sources:[]};if(Array.isArray(e.sources))for(var e=$jscomp.makeIterator(e.sources),f=e.next();!f.done;f=e.next())a.sources.push(f.value);c.push(a)}r.table("Distributors").update(c).run(CONNECTION,function(a,b){a?(d.send({err:"Error updating distributors."}),DEBUG&&console.log(a)):(d.send({}),DEBUG&&console.log("Updated distributors."))})}}
function actionPushUpdate(c,d,b){function a(a,b){DEBUG&&console.log(a||b);if(b&&"object"==typeof b.changes[0].new_val){var c=b.changes[0].new_val;r.table("Distributors").without("name").merge(function(a){return{collators:r.table("Collators").getAll(r.args(a("collators"))).pluck("id","filters").merge(function(a){return{filters:r.table("Filters").getAll(r.args(a("filters"))).pluck("id","json","code").coerceTo("array")}}).coerceTo("array")}}).coerceTo("array").run(CONNECTION,function(a,b){for(var f=
{},h=[],m=$jscomp.makeIterator(b),l=m.next();!l.done;l=m.next())for(var l=l.value,l=$jscomp.makeIterator(l.collators),g=l.next();!g.done;g=l.next())for(var g=g.value,n=$jscomp.makeIterator(g.filters),g=n.next();!g.done;g=n.next())g=g.value,f.hasOwnProperty(g.id)||(f[g.id]=g.json);DEBUG&&console.log(f);for(var p=!1,l=Object.keys(f),l=$jscomp.makeIterator(l),m=l.next();!m.done;m=l.next())k=m.value,recur(f[k],c,"ROOT")&&(f[k]=!0);m=$jscomp.makeIterator(b);for(l=m.next();!l.done;l=m.next())for(l=l.value,
n=$jscomp.makeIterator(l.collators),g=n.next();!g.done;g=n.next()){for(var g=g.value,p=!1,q=$jscomp.makeIterator(g.filters),g=q.next();!g.done;g=q.next())if(g=g.value,f[g.id]){g=JSON.parse(JSON.stringify(e));l.accessor&&(g.accessor=l.accessor);l.push&&!l.queue&&(g.id=r.uuid(g.id+" "+l.id));g.distributor=l.id;h.push(g);l.callback&&validUrl.isUri(l.url)?sendDataToCallback(g,l.url):l.push&&r.table("DistributedData").insert(h).run(CONNECTION,function(a,b){DEBUG&&console.log(a||b)});p=!0;break}if(p)break}DEBUG&&
console.log("PASS");d.send({})})}}var e={};"string"!=typeof b.accessor?d.send({err:"No accessor specified."}):(c=typeof b.value,"undefined"==c||"null"==c?d.send({err:"No value specified."}):"string"==typeof b.id?e.id=b.id:(e.accessor=b.accessor,e.value=b.value,e.id?r.branch(r.table("Collectors").getAll(e.accessor,{index:"accessor"}).filter({aggregate:!0}).limit(1).count().eq(1),r.table("Collectors").get(e.id).update({value:e.value},{return_changes:"always"}),{replaced:0}).run(CONNECTION,a):r.table("Collectors").getAll(e.accessor,
{index:"accessor"}).update({value:e.value},{return_changes:"always"}).run(CONNECTION,a)))}function sendDataToCallback(c,d){d.match(/^[A-Za-z]+:\/\//)||(d="http://"+d);request.post({headers:{"content-type":"application/json"},url:d,body:c,json:!0},function(b,a,c){DEBUG&&console.log("Called back")})}
function recur(c,d,b){var a,e=!1;a=evaluateProperty(c,d,0);d=evaluateProperty(c,d,1);switch(b){case "ROOT":e=!!a;break;case "AND":e=a&&d;break;case "OR":e=a||d;break;case "NAND":e=!(a&&d);break;case "NOR":e=!(a||d);break;case "XOR":e=(a||d)&&!(a&&d);break;case "UNDER":e=a<d;break;case "OVER":e=a>d;break;case "EQUALS":e=a==d;break;case "TFEQUALS":e=a===d;break;case "NEQUALS":e=a!=d;break;case "TFNEQUALS":e=a!==d;break;case "OVEROR":e=a>=d;break;case "UNDEROR":e=a<=d}DEBUG&&console.log(c,a,d,b,e);return e}
function getProperty(c,d){for(var b=$jscomp.makeIterator(d.substring(1).split(".")),a=b.next();!a.done;a=b.next())if(a=a.value,DEBUG&&console.log(a,c[a]),"undefined"!=typeof c[a]&&"null"!=typeof c[a])c=c[a];else return null;DEBUG&&console.log("PROP",c);return c}function evaluateProperty(c,d,b){b=Object.keys(c)[b];c=c[b];switch(typeof c){case "object":c=recur(c,d,b);break;case "string":"$"===c[0]&&(c=getProperty(d,c))}return c}
function actionGetFilters(c,d,b){if(Array.isArray(b.ids)){c=$jscomp.makeIterator(b.ids);for(var a=c.next();!a.done;a=c.next())if(a=a.value,"string"!=typeof a||55<a.length){d.send({err:"Invalid (non-string) ID provided."});return}r.table("Filters").filter(function(a){return r.expr(b.ids).contains(a("id"))}).coerceTo("array").run(CONNECTION,function(a,b){a?(d.send({err:"Unable to query."}),DEBUG&&console.log(a)):(d.send({filters:b}),DEBUG&&console.log("Queried filters."),DEBUG&&console.log(b))})}else d.send({err:"No list of IDs provided."})}
function actionDeleteFilters(c,d,b){if(Array.isArray(b.ids)){c=$jscomp.makeIterator(b.ids);for(var a=c.next();!a.done;a=c.next())if(a=a.value,"string"!=typeof a||55<a.length){d.send({err:"Invalid (non-string) ID provided."});return}r.table("Filters").filter(function(a){return r.expr(b.ids).contains(a("id"))})["delete"]().run(CONNECTION,function(a,b){a?(d.send({err:"Unable to query."}),DEBUG&&console.log(a)):(d.send({filters:b}),DEBUG&&console.log("Queried filters."),DEBUG&&console.log(b))})}else d.send({err:"No list of IDs provided."})}
function actionGetCollators(c,d,b){if(Array.isArray(b.ids)){c=$jscomp.makeIterator(b.ids);for(var a=c.next();!a.done;a=c.next())if(a=a.value,"string"!=typeof a||55<a.length){d.send({err:"Invalid (non-string) ID provided."});return}r.table("Collators").filter(function(a){return r.expr(b.ids).contains(a("id"))}).merge(function(a){return{filtrets:r.table("Filters").getAll(r.args(a("filters"))).coerceTo("array")}}).coerceTo("array").run(CONNECTION,function(a,b){a?(d.send({err:"Unable to query."}),DEBUG&&
console.log(a)):(d.send({collators:b}),DEBUG&&console.log("Queried collators."),DEBUG&&console.log(b))})}else d.send({err:"No list of IDs provided."})}
function actionDeleteCollators(c,d,b){if(Array.isArray(b.ids)){c=$jscomp.makeIterator(b.ids);for(var a=c.next();!a.done;a=c.next())if(a=a.value,"string"!=typeof a||55<a.length){d.send({err:"Invalid (non-string) ID provided."});return}r.table("Collators").filter(function(a){return r.expr(b.ids).contains(a("id"))})["delete"]().run(CONNECTION,function(a,b){a?(d.send({err:"Unable to query."}),DEBUG&&console.log(a)):(DEBUG&&console.log("Queried collators."),DEBUG&&console.log(b))})}else d.send({err:"No list of IDs provided."})}
function actionGetDistributors(c,d,b){if(Array.isArray(b.ids)){c=$jscomp.makeIterator(b.ids);for(var a=c.next();!a.done;a=c.next())if(a=a.value,"string"!=typeof a||55<a.length){d.send({err:"Invalid (non-string) ID provided."});return}r.table("Distributors").filter(function(a){return r.expr(b.ids).contains(a("id"))}).merge(function(a){return{collators:r.table("Collators").getAll(r.args(a("collators"))).merge(function(a){return{filters:r.table("Filters").getAll(r.args(a("filters"))).coerceTo("array")}}).coerceTo("array")}}).coerceTo("array").run(CONNECTION,
function(a,b){a?(d.send({err:"Unable to query."}),DEBUG&&console.log(a)):(d.send({distributors:b}),DEBUG&&console.log("Queried distributors."),DEBUG&&console.log(b))})}else d.send({err:"No list of IDs provided."})}
function actionDeleteDistributors(c,d,b){if(Array.isArray(b.ids)){c=$jscomp.makeIterator(b.ids);for(var a=c.next();!a.done;a=c.next())if(a=a.value,"string"!=typeof a||55<a.length){d.send({err:"Invalid (non-string) ID provided."});return}r.table("Distributors").filter(function(a){return r.expr(b.ids).contains(a("id"))})["delete"]().run(CONNECTION,function(a,b){a?(d.send({err:"Unable to query."}),DEBUG&&console.log(a)):(DEBUG&&console.log("Queried distributors."),DEBUG&&console.log(b))})}else d.send({err:"No list of IDs provided."})}
function actionGetCollectors(c,d,b){if(Array.isArray(b.ids)){c=$jscomp.makeIterator(b.ids);for(var a=c.next();!a.done;a=c.next())if(a=a.value,"string"!=typeof a||55<a.length){d.send({err:"Invalid (non-string) ID provided."});return}r.table("Collectors").filter(function(a){return r.expr(b.ids).contains(a("id"))}).coerceTo("array").run(CONNECTION,function(a,b){a?(d.send({err:"Unable to query."}),DEBUG&&console.log(a)):(d.send({collectors:b}),DEBUG&&console.log("Queried collectors."),DEBUG&&console.log(b))})}else d.send({err:"No list of IDs provided."})}
function actionDeleteCollectors(c,d,b){if(Array.isArray(b.ids)){c=$jscomp.makeIterator(b.ids);for(var a=c.next();!a.done;a=c.next())if(a=a.value,"string"!=typeof a||55<a.length){d.send({err:"Invalid (non-string) ID provided."});return}r.table("Collectors").filter(function(a){return r.expr(b.ids).contains(a("id"))})["delete"]().run(CONNECTION,function(a,b){a?(d.send({err:"Unable to query."}),DEBUG&&console.log(a)):(DEBUG&&console.log("Queried collectors."),DEBUG&&console.log(b))})}else d.send({err:"No list of IDs provided."})}
function actionCountFilterReferences(c,d,b){query=buildFilterReferenceCounterQuery(Array.isArray(b.ids)?b.ids:null);query.coerceTo("array").run(CONNECTION,function(a,b){a?d.send("Error counting filter references."):d.send({filters:b})})}
function buildFilterReferenceCounterQuery(c,d){var b=r.table("Filters");Array.isArray(c)&&(b=b.filter(function(a){return r.expr(c).contains(a("id"))}));return b=b.map(function(a){return{id:a("id"),refcount:r.table("Collators").group("id")("filters")(0).contains(a("id")).ungroup()("reduction").filter(function(a){return a.eq(!0)}).count()}})}
function actionCountCollatorReferences(c,d,b){query=buildCollatorReferenceCounterQuery(Array.isArray(b.ids)?b.ids:null);query.coerceTo("array").run(CONNECTION,function(a,b){a?d.send("Error counting collator references."):d.send({collators:b})})}
function buildCollatorReferenceCounterQuery(c,d){var b=r.table("Collators");Array.isArray(c)&&(b=b.filter(function(a){return r.expr(c).contains(a("id"))}));return b=b.map(function(a){return{id:a("id"),refcount:r.table("Distributors").group("id")("collators")(0).contains(a("id")).ungroup()("reduction").filter(function(a){return a.eq(!0)}).count()}})}
function actionListFilterReferrers(c,d,b){buildFilterReferrerListerQuery(Array.isArray(b.ids)?b.ids:null).coerceTo("array").run(CONNECTION,function(a,b){a?d.send("Error listing filter referrers."):d.send({filters:b})})}
function buildFilterReferrerListerQuery(c,d){var b=r.table("Filters");Array.isArray(c)&&(b=b.filter(function(a){return r.expr(c).contains(a("id"))}));return b=b.map(function(a){return{id:a("id"),referrers:r.db("LiotR").table("Collators").filter(function(b){return b("filters").contains(a("id"))}).merge(function(a){return{filtrets:r.table("Filters").getAll(r.args(a("filters"))).coerceTo("array")}}).coerceTo("array")}})}
function actionListFilterDistributors(c,d,b){buildFilterReferrerListerQuery(Array.isArray(b.ids)?b.ids:null).coerceTo("array").run(CONNECTION,function(a,b){a?d.send("Error listing filter referrers."):d.send({filters:b})})}
function buildFilterDistributorListerQuery(c,d){var b=r.table("Filters");Array.isArray(c)&&(b=b.filter(function(a){return r.expr(c).contains(a("id"))}));return b=b.map(function(a){return{id:a("id"),referrers:r.db("LiotR").table("Collators").filter(function(b){return b("filters").contains(a("id"))}).merge(function(a){return{filtrets:r.table("Filters").getAll(r.args(a("filters"))).coerceTo("array")}}).coerceTo("array")}})};
