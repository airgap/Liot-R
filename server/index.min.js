var DEBUG=1,COMPARATORS="EQUALS NEQUALS TFEQUALS TFNEQUALS OVER OVEROR UNDER UNDEROR".split(" "),OPERATORS="AND OR NAND NOR XOR SAME".split(" "),r=require("rethinkdb"),express=require("express"),bodyParser=require("body-parser"),validUrl=require("valid-url"),request=require("request"),app=express(),fs=require("fs"),CONFIG={port:7474};app.use(bodyParser.json());
app.use(function(b,a,c){a.header("Access-Control-Allow-Origin","*");a.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept");c()});
var kRETURN_CHANGES={return_changes:!0},actions={collectors:{list:require("./modules/action-list-collectors"),add:require("./modules/action-add-collectors"),get:require("./modules/action-get-collectors"),"delete":require("./modules/action-delete-collectors")},filters:{list:require("./modules/action-list-filters"),add:require("./modules/action-add-filters"),get:require("./modules/action-get-filters"),"delete":require("./modules/action-delete-filters"),references:{count:require("./modules/action-count-filter-references")},
referrers:{list:require("./modules/action-list-filter-referrers")}},collators:{list:require("./modules/action-list-collators"),add:require("./modules/action-add-collators"),get:require("./modules/action-get-collators"),"delete":require("./modules/action-delete-collators"),references:{count:require("./modules/action-count-collator-references")}},distributors:{list:require("./modules/action-list-distributors"),add:require("./modules/action-add-distributors"),get:require("./modules/action-get-distributors"),
"delete":require("./modules/action-delete-distributors")},updates:{push:require("./modules/action-push-update")}},ADMINACTIONS={"list collectors":actions.collectors.list,"add collectors":actions.collectors.add,"get collectors":actions.getCollectors,"delete collectors":actions.deleteCollectors,"list filters":actions.filters.list,"add filters":actions.filters.add,"get filters":actions.filters.get,"delete filters":actions.filters["delete"],"count filter references":actions.filters.references.count,"list filter referrers":actions.filters.referrers.list,
"list collators":actions.collators.list,"add collators":actions.collators.add,"get collators":actions.collators.get,"delete collators":actions.collators["delete"],"count collator references":actions.collators.references.count,"list distributors":actions.distributors.list,"add distributors":actions.distributors.add,"get distributors":actions.distributors.get,"delete distributors":actions.distributors["delete"],"push update":actions.updates.push},PUBLICACTIONS={};readConfig();
function readConfig(){fs.readFile("liot-server-conf.json",function(b,a){if(a){var c=JSON.parse(a.toString());c.port&&(CONFIG.port=c.port);DEBUG&&console.log(c)}startRethinkServer();launchHttpServer()})}
function startRethinkServer(){r.connect({host:"localhost"},function(b,a){b||!a?DEBUG&&console.log("Cannot connect to RethinkDB"):r.dbList().contains("LiotR")["do"](function(a){return r.branch(a,{dbs_created:0},r.dbCreate("LiotR"))}).run(a,function(b,d){if(b||!a)return DEBUG&&console.log("Could not ensure existence of database for Liot R."),!1;CONNECTION=a;a.use("LiotR");d.dbs_created&&(DEBUG?console.log("Created database for Liot R."):DEBUG&&console.log("Found database for Liot R."));DEBUG&&console.log("Connected to database for Liot R.");
return!0})})}function launchHttpServer(){app.post("/",rcvdPost);app.listen(CONFIG.port)}function rcvdPost(b,a){var c=b.connection.remoteAddress.match(/^(127.0.0.1|::ffff:127.0.0.1|::1)$/)&&!0;DEBUG&&console.log(c);DEBUG&&console.log(b.body);var d=b.body.action;a.header("Access-Control-Allow-Origin","*");if(d){var e=b.body;if(c&&d in ADMINACTIONS)ADMINACTIONS[d](DEBUG,CONNECTION,b,a,e);else if(d in PUBLICACTIONS)PUBLICACTIONS[d](DEBUG,CONNECTION,b,a,e)}};
